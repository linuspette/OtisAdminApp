@inject IErrandDataService errandDataService;
@inject IDialogService dialogService;
@inject ILinkService linkService
@inject NavigationManager navManager


<MudPaper Class="mx-auto pa-10 ma-10 d-flex">
<MudGrid>
    <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="RedirectToCreateErrand">Create Errand</MudButton>
    </MudItem>
    <MudItem xs="12">
            @if (Errands != null && Errands.Count > 0)
            {
                <MudTable Elevation="0" T="ErrandViewModel" Items="Errands" Hover="true" Dense="true" Filter="new Func<ErrandViewModel, bool>(FilterToTable)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Elevators</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="@_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Errand Number</MudTh>
                        <MudTh>Title</MudTh>
                        <MudTh>Elevator Id</MudTh>
                        <MudTh>Resolved</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudLink Href="@linkService.ViewErrand(context.ErrandNumber)">
                            <MudTd DataLabel="ErrandNumber">@context.ErrandNumber</MudTd>
                            <MudTd DataLabel="ErrandNumber">@context.Title</MudTd>
                            <MudTd DataLabel="ErrandNumber">@context.Elevator.Id</MudTd>
                            <MudTd DataLabel="ErrandNumber">@context.IsResolved</MudTd>
                        </MudLink>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
            else
            {
                <MudText Typo="Typo.h4">No errands found</MudText>
            }
    </MudItem>
</MudGrid>
</MudPaper>


@code {
    [Parameter]
    public string? DeviceId { get; set; }
    [Parameter]
    public List<ErrandViewModel> Errands { get; set; } = null!;

    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadErrandsAsync();
    }

    private void RedirectToCreateErrand()
    {
        navManager.NavigateTo(linkService.AddErrand());
    }

    private async Task LoadErrandsAsync()
    {
        if (Errands == null || Errands.Count < 1)
            if (!string.IsNullOrEmpty(DeviceId))
            {
                try
                {
                    Errands = await errandDataService.GetAllElevatorErrands(DeviceId);
                    if (Errands != null && Errands.Count > 0)
                        Errands = Errands.OrderBy(x => x.ErrandNumber).ToList();
                }
                catch { }
            }
            else
            {
                try
                {
                    Errands = await errandDataService.GetAllElevatorErrands();
                    if(Errands != null && Errands.Count > 0)
                        Errands = Errands.OrderBy(x => x.Elevator.Id).ToList();
                }
                catch { }
            }
    }

    private bool FilterToTable(ErrandViewModel errand) => FilterFunction(errand, _searchString);
    private bool FilterFunction(ErrandViewModel errand, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (errand.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (errand.ErrandNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
