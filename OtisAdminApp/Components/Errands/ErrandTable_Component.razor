@inject IErrandDataService errandDataService;
@inject IDialogService dialogService;

if(validDeviceId)
{
    @if (Errands.Count() > 0)
    {
        <MudTable Elevation="0" T="ErrandViewModel" Items="Errands" Hover="true" Dense="true" Filter="new Func<ErrandViewModel, bool>(FilterToTable)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Elevators</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="@_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Errand Number</MudTh>
                <MudTh>Title</MudTh>
                <MudTh>Elevator Id</MudTh>
                <MudTh>Resolved</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ErrandNumber">@context.ErrandNumber</MudTd>
                <MudTd DataLabel="ErrandNumber">@context.Title</MudTd>
                <MudTd DataLabel="ErrandNumber">@context.Elevator.Id</MudTd>
                <MudTd DataLabel="ErrandNumber">@context.IsResolved</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
    </MudTable>
}


@code {
    [Parameter]
    public string DeviceId { get; set; } = null!;
    [Parameter]
    public List<ErrandViewModel> Errands { get; set; } = null!;

    private string _searchString = "";
    private bool validDeviceId = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadErrandsAsync();
    }

    private async Task OpenMsgBox()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true
            };

        var result = dialogService.Show<ElevatorId_Input_Dialog>("Enter elevator id", options);
        await LoadErrandsAsync();
    }

    private async Task LoadErrandsAsync()
    {
        if (Errands == null)
            if (!string.IsNullOrEmpty(DeviceId))
            {
                try
                {
                    Errands = await errandDataService.GetAllElevatorErrands(DeviceId);
                    if (Errands != null)
                    {
                        validDeviceId = true;
                    }
                }
                catch
                {
                    validDeviceId = false;
                }
            }
    }

    private bool FilterToTable(ErrandViewModel errand) => FilterFunction(errand, _searchString);
    private bool FilterFunction(ErrandViewModel errand, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (errand.Id.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (errand.ErrandNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }
}
